// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: diagnosis/diagnosis.proto

package diagnosispb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Diagnosis_GetDiagnosis_FullMethodName = "/diagnosis.Diagnosis/GetDiagnosis"
)

// DiagnosisClient is the client API for Diagnosis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiagnosisClient interface {
	GetDiagnosis(ctx context.Context, in *DiagnosisRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnosisResponse], error)
}

type diagnosisClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosisClient(cc grpc.ClientConnInterface) DiagnosisClient {
	return &diagnosisClient{cc}
}

func (c *diagnosisClient) GetDiagnosis(ctx context.Context, in *DiagnosisRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnosisResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Diagnosis_ServiceDesc.Streams[0], Diagnosis_GetDiagnosis_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiagnosisRequest, DiagnosisResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Diagnosis_GetDiagnosisClient = grpc.ServerStreamingClient[DiagnosisResponse]

// DiagnosisServer is the server API for Diagnosis service.
// All implementations must embed UnimplementedDiagnosisServer
// for forward compatibility.
type DiagnosisServer interface {
	GetDiagnosis(*DiagnosisRequest, grpc.ServerStreamingServer[DiagnosisResponse]) error
	mustEmbedUnimplementedDiagnosisServer()
}

// UnimplementedDiagnosisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiagnosisServer struct{}

func (UnimplementedDiagnosisServer) GetDiagnosis(*DiagnosisRequest, grpc.ServerStreamingServer[DiagnosisResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDiagnosis not implemented")
}
func (UnimplementedDiagnosisServer) mustEmbedUnimplementedDiagnosisServer() {}
func (UnimplementedDiagnosisServer) testEmbeddedByValue()                   {}

// UnsafeDiagnosisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiagnosisServer will
// result in compilation errors.
type UnsafeDiagnosisServer interface {
	mustEmbedUnimplementedDiagnosisServer()
}

func RegisterDiagnosisServer(s grpc.ServiceRegistrar, srv DiagnosisServer) {
	// If the following call pancis, it indicates UnimplementedDiagnosisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Diagnosis_ServiceDesc, srv)
}

func _Diagnosis_GetDiagnosis_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiagnosisRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiagnosisServer).GetDiagnosis(m, &grpc.GenericServerStream[DiagnosisRequest, DiagnosisResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Diagnosis_GetDiagnosisServer = grpc.ServerStreamingServer[DiagnosisResponse]

// Diagnosis_ServiceDesc is the grpc.ServiceDesc for Diagnosis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Diagnosis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diagnosis.Diagnosis",
	HandlerType: (*DiagnosisServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDiagnosis",
			Handler:       _Diagnosis_GetDiagnosis_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diagnosis/diagnosis.proto",
}
